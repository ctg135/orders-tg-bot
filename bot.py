import datetime
import telebot
import re
from telebot import types

import config
import db
import format

bot = telebot.TeleBot(config.BOT_TOKEN, parse_mode='HTML')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
orders_chat = config.ORDERS_CHAT_ID
admin = config.ADMIN_CHAT_ID

# –ö–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
carts = {}
# –°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cart_message_id = {}
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.check_database()

def load_admins():
    '''
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
    '''
    global admin
    admin = config.ADMIN_CHAT_ID
    admins = db.get_admins()
    for item in admins:
        admin.append(item[0])

load_admins()

def check_access_time() -> bool:
    '''
    –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥: —Å 9:00 –¥–æ 11:00
    '''
    return True
    now = datetime.datetime.now()
    current_hour = now.hour
    current_minute = now.minute

    if 9 <= current_hour <= 11 and current_minute < 60: return True
    else: return False

def check_access_message(message: types.Message) -> bool:
    '''
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—É—Ç–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –±–æ—Ç–∞
    –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    '''
    access = check_access_time()
    if access: return access
    bot.send_message(message.chat.id, 
                     format.get_access_restricted_text(),
                     reply_markup=format.get_ok_keyboard())
    return access

def check_access_callback(callback: types.CallbackQuery) -> bool:
    '''
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—É—Ç–ø–∞ –∫ callback –∫–Ω–æ–ø–∫–∞–º –±–æ—Ç–∞
    –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    '''
    access = check_access_time()
    if access: return
    bot.delete_message(callback.message.chat.id, callback.message.id)
    bot.send_message(callback.message.chat.id, 
                     format.get_access_restricted_text(),
                     reply_markup=format.get_ok_keyboard())
    return access

@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ'])
def hello_message_command(message):
    '''
    –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    '''
    if message.chat.id < 0:  return
    if message.chat.id not in admin:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not check_access_message(message):  return
        bot.send_message(message.chat.id, 
                    format.get_hello_client_text(), 
                    reply_markup=format.get_hello_client_keyboard())
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(message.chat.id, 
                     format.get_hello_admin_text(), 
                     reply_markup=format.get_hello_admin_keyboard())

@bot.message_handler(content_types=['text'])
def get_all_mesasge(message):
    '''
    –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    '''
    if message.chat.id < 0:  return
    if message.chat.id not in admin:
        if not check_access_message(message):  return
        match message.text:
            case format.button_init_order:
                start_order(message)
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            case _: 
                bot.send_message(message.chat.id, 
                    format.get_hello_client_text(), 
                    reply_markup=format.get_hello_client_keyboard())
    else:
        # –û–±—Ä–∞–±—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        match message.text:
            # –í—ã–≤–æ–¥ –º–µ–Ω—é (–ø–æ–ª–Ω–æ—Å—Ç—å—é)
            case format.button_menu_full:
                menu = db.menu_get_list()
                if len(menu) == 0:
                    bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å —Ç—É—Ç –ø—É—Å—Ç–æ', reply_markup=format.get_menu_add_keyboard())
                else:
                    bot.send_message(message.chat.id, format.format_menu_list_full(menu), reply_markup=format.get_menu_edit_keyboard())
            # –í—ã–≤–æ–¥ –º–µ–Ω—é (–∫–∞–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
            case format.button_menu_nice:
                menu = db.menu_get_list_nice()
                if len(menu) == 0:
                    bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å —Ç—É—Ç –ø—É—Å—Ç–æ', reply_markup=format.get_menu_add_keyboard())
                else:
                    bot.send_message(message.chat.id, format.format_menu_list_nice(menu), reply_markup=format.get_menu_edit_keyboard())
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            case format.button_hello_text:
                msg = bot.send_message(message.chat.id, 
                                 format.get_message_hello_edit(),
                                 reply_markup=format.get_ok_keyboard())
                bot.register_next_step_handler(msg, set_hello_message)
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            case format.button_admins:
                bot.send_message(message.chat.id, 
                                 format.get_admin_list_text(),
                                 reply_markup=format.get_admin_list_edit_keyboard())
            case _:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                bot.send_message(message.chat.id, 
                                format.get_hello_admin_text(), 
                                reply_markup=format.get_hello_admin_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def get_callback(callback: types.CallbackQuery):
    # if not check_access_callback(callback):  return
    
    match callback.data:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
        case 'menu_add':
            menu_add_item_step1(callback)
            return
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
        case 'menu_edit':
            menu_edit_item_step1(callback)
            return
        # –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é
        case 'menu_delete':
            menu_delete_item_step1(callback)
            return
    call = callback.data.split('_')
    match call[0]:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        case 'cart':
            match call[1]:
                # –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                case 'delete':
                    if '+' in call[2]:
                        carts[callback.message.chat.id].pop(call[2])
                    else: 
                        carts[callback.message.chat.id].pop(int(call[2]))
                    bot.delete_message(callback.message.chat.id, callback.message.id)
                    msg = bot.send_message(callback.message.chat.id,
                        format.format_cart_list(carts[callback.message.chat.id]),
                        reply_markup=format.get_cart_edit_keyboard(carts[callback.message.chat.id])
                        )
                    cart_message_id[callback.message.chat.id] = msg.id
                # –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                case 'plus':
                    if '+' in call[2]:
                        count = carts[callback.message.chat.id][call[2]]
                        carts[callback.message.chat.id][call[2]] = count + 1
                    else: 
                        count = carts[callback.message.chat.id][int(call[2])]
                        carts[callback.message.chat.id][int(call[2])] = count + 1
                    bot.delete_message(callback.message.chat.id, callback.message.id)
                    msg = bot.send_message(callback.message.chat.id,
                        format.format_cart_list(carts[callback.message.chat.id]),
                        reply_markup=format.get_cart_edit_keyboard(carts[callback.message.chat.id])
                        )
                    cart_message_id[callback.message.chat.id] = msg.id

                # –ü—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
                case 'minus':
                    if '+' in call[2]:
                        count = carts[callback.message.chat.id][call[2]]
                        if count <= 1:
                            carts[callback.message.chat.id].pop(call[2])
                        else: 
                            carts[callback.message.chat.id][call[2]] = count - 1
                    else: 
                        count = carts[callback.message.chat.id][int(call[2])]
                        if count <= 1:
                            carts[callback.message.chat.id].pop(int(call[2]))
                        else: 
                            carts[callback.message.chat.id][int(call[2])] = count - 1
                    bot.delete_message(callback.message.chat.id, callback.message.id)
                    msg = bot.send_message(callback.message.chat.id,
                        format.format_cart_list(carts[callback.message.chat.id]),
                        reply_markup=format.get_cart_edit_keyboard(carts[callback.message.chat.id])
                        )
                    cart_message_id[callback.message.chat.id] = msg.id
        case 'order':
            # –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
            match call[1]:
                case 'accept':
                    client = db.order_accept(int(call[2]))
                    bot.send_message(orders_chat, format.get_order_accepted_chat_text(call[2]))
                    bot.edit_message_reply_markup(callback.message.chat.id, 
                                                  callback.message.id, 
                                                  reply_markup=None)
                    bot.edit_message_text(callback.message.text.replace('üü°', 'üü¢'), 
                                          callback.message.chat.id, 
                                          callback.message.id)
                    
                    bot.send_message(client,
                                     format.get_order_accpeted_client_text(call[2]),
                                     reply_markup=format.get_hello_client_keyboard())
                    bot.send_sticker(client, 'CAACAgIAAxkBAAENBLxnHRKLdtGhrw1Us1bOPSq8Ohlo_wACHwADDbbSGVMMqpEYFo4gNgQ')
                case 'cancel':
                    client = db.order_cancel(int(call[2]))
                    bot.send_message(orders_chat, format.get_order_canceled_chat_text(call[2]))
                    bot.edit_message_reply_markup(callback.message.chat.id, 
                                                  callback.message.id, 
                                                  reply_markup=None)
                    bot.edit_message_text(callback.message.text.replace('üü°', 'üî¥'), 
                                          callback.message.chat.id, 
                                          callback.message.id)
                    
                    bot.send_message(client, 
                                     format.get_order_canceled_client_text(call[2]),
                                     reply_markup=format.get_hello_client_keyboard())
        case 'admin':
            bot.delete_message(callback.message.chat.id, 
                               callback.message.id)
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            match call[1]:
                case 'add':
                    msg = bot.send_message(callback.message.chat.id,
                                           format.get_admin_name(), 
                                           reply_markup=format.get_back_keyboard())
                    bot.register_next_step_handler(callback.message,
                                                   add_admin_step1)
                case 'delete':
                    db.delete_admin(call[2])
                    bot.send_message(callback.message.chat.id, '–£–¥–∞–ª–µ–Ω–æ!')
                    bot.send_message(callback.message.chat.id, 
                                 format.get_admin_list_text(),
                                 reply_markup=format.get_admin_list_edit_keyboard())
                    load_admins()


# –°–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é

def menu_add_item_step1(callback):
    '''
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    '''
    msg = bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞', reply_markup=format.get_menu_category_keyboard())
    bot.register_next_step_handler(msg, menu_add_item_step2)

def menu_add_item_step2(message):
    '''
    –í—ã–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
    '''

    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return

    add_item = db.Food()
    match message.text:
        case format.category_1: add_item.category = 1
        case format.category_2: add_item.category = 2
        case format.category_3: add_item.category = 3
        case format.category_4: add_item.category = 4
        case format.category_5: add_item.category = 5
        case format.button_back: 
            bot.send_message(message.chat.id, 
                     format.get_hello_admin_text(), 
                     reply_markup=format.get_hello_admin_keyboard())
            return
        case _: 
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', reply_markup=format.get_hello_admin_keyboard())
            return

    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, menu_add_item_step3, add_item)

def menu_add_item_step3(message, add_item):
    '''
    –í—ã–±–æ—Ä —Ü–µ–Ω—ã
    '''

    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return
    
    add_item.name = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, menu_add_item_step4, add_item)

def menu_add_item_step4(message, add_item):
    '''
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    '''

    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=format.get_hello_admin_keyboard())
        return
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=format.get_hello_admin_keyboard())
        return
    
    add_item.price = message.text
    db.menu_add_item(add_item)
    bot.send_message(message.chat.id, '‚úÖ –ì–æ—Ç–æ–≤–æ!', reply_markup=format.get_hello_admin_keyboard())

# –°–µ–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é

def menu_edit_item_step1(callback):
    '''
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    '''
    msg = bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞', reply_markup=format.get_menu_category_keyboard())
    bot.register_next_step_handler(msg, menu_edit_item_step2)

def menu_edit_item_step2(message):
    '''
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return
    
    cat = 0
    match message.text:
        case format.category_1: cat = 1
        case format.category_2: cat = 2
        case format.category_3: cat = 3
        case format.category_4: cat = 4
        case format.category_5: cat = 5
        case format.button_back: 
            bot.send_message(message.chat.id, 
                     format.get_hello_admin_text(), 
                     reply_markup=format.get_hello_admin_keyboard())
        case _: 
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', reply_markup=format.get_hello_admin_keyboard())
            return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è + –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    menu = db.menu_get_list_category(cat)
    if len(menu) == 0:
        msg = bot.send_message(message.chat.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç—É –±–ª—é–¥', reply_markup=format.get_hello_admin_keyboard())
        return

    msg = bot.send_message(message.chat.id, 
                    f'–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{format.format_menu_list_id(menu)}',
                    reply_markup=format.get_menu_id_category_keyboard(menu)) 

    bot.register_next_step_handler(msg, menu_edit_item_step3, menu)

def menu_edit_item_step3(message, menu):
    '''
    –í—ã–±–æ—Ä –±–ª—é–¥–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return
    
    edit_item = None
    for item in menu:
        if str(item.id) == message.text:
            edit_item = item

    if edit_item == None: 
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=format.get_hello_admin_keyboard())
        return
    
    msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –º–µ–Ω—é', reply_markup=format.get_menu_visibility_edit_keyobard())
    bot.register_next_step_handler(msg, menu_edit_item_step34, edit_item)

def menu_edit_item_step34(message, edit_item):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return
    
    match message.text:
        case format.button_ok: pass
        case format.button_menu_hidden: edit_item.visibility = 0
        case format.button_menu_visible: edit_item.visibility = 1
        case _: 
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å', reply_markup=format.get_hello_admin_keyboard())
            return

    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ <i>–û–∫</i> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', reply_markup=format.get_ok_keyboard())
    bot.register_next_step_handler(msg, menu_edit_item_step4, edit_item)

def menu_edit_item_step4(message, edit_item):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return
    
    if not message.text == '–û–∫':
        edit_item.name = message.text

    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ <i>–û–∫</i> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', reply_markup=format.get_ok_keyboard())
    bot.register_next_step_handler(msg, menu_edit_item_step5, edit_item)
    
def menu_edit_item_step5(message, edit_item):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=format.get_hello_admin_keyboard())
        return
    
    if message.text == '–û–∫':
        pass
    elif not message.text.isdigit():
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=format.get_hello_admin_keyboard())
        return
    else: edit_item.price = message.text

    db.menu_edit_item(edit_item.id, edit_item)
    bot.send_message(message.chat.id, '‚úÖ –ì–æ—Ç–æ–≤–æ!', reply_markup=format.get_hello_admin_keyboard())

# –°–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é

def menu_delete_item_step1(callback):
    '''
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    '''
    msg = bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞', reply_markup=format.get_menu_category_keyboard())
    bot.register_next_step_handler(msg, menu_delete_item_step2)

def menu_delete_item_step2(message):
    '''
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return
    
    cat = 0
    match message.text:
        case format.category_1: cat = 1
        case format.category_2: cat = 2
        case format.category_3: cat = 3
        case format.category_4: cat = 4
        case format.category_5: cat = 5
        case _: 
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', reply_markup=format.get_hello_admin_keyboard())
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è + –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    menu = db.menu_get_list_category(cat)
    if len(menu) == 0:
        msg = bot.send_message(message.chat.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç—É –±–ª—é–¥', reply_markup=format.get_hello_admin_keyboard())
        return

    msg = bot.send_message(message.chat.id, 
                    f'–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b>:\n{format.format_menu_list_id(menu)}',
                    reply_markup=format.get_menu_id_category_keyboard(menu))
    bot.register_next_step_handler(msg, menu_delete_item_step3, menu)

def menu_delete_item_step3(message, menu):
    '''
    –í—ã–±–æ—Ä –±–ª—é–¥–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        return

    food = ''
    for item in menu:
        if str(item.id) == message.text:
            food = item

    if food == '': 
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=format.get_hello_admin_keyboard())
        return

    db.menu_delete_item(food.id)
    bot.send_message(message.chat.id, '‚úÖ –ì–æ—Ç–æ–≤–æ!', reply_markup=format.get_hello_admin_keyboard())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

def set_hello_message(message):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=format.get_hello_admin_keyboard())
        bot.register_next_step_handler(message, set_hello_message)
        return
    if message.text == format.button_ok:
        get_all_mesasge(message)
        return
    
    db.set_message_hello_text(message.text)

    bot.send_message(message.chat.id, '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    msg = bot.send_message(message.chat.id, 
                                 format.get_message_hello_edit(),
                                 reply_markup=format.get_ok_keyboard())
    bot.register_next_step_handler(msg, set_hello_message)

# –°–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 

def add_admin_step1(message: types.Message) -> None:
    '''
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(add_admin_step1)
        return
    
    if message.text == format.button_back:
        bot.send_message(message.chat.id, 
                     format.get_hello_admin_text(),
                     reply_markup=format.get_hello_admin_keyboard())
        return
    
    msg = bot.send_message(message.chat.id, 
                           format.get_admin_id(), 
                           reply_markup=format.get_back_keyboard())
    bot.register_next_step_handler(msg, add_admin_step2, message.text)

def add_admin_step2(message: types.Message, name: str) -> None:
    '''
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    '''
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(add_admin_step2)
        return

    if message.text == format.button_back:
        bot.send_message(message.chat.id, 
                     format.get_hello_admin_text(),
                     reply_markup=format.get_hello_admin_keyboard())
        return
    
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(add_admin_step2)
        return
    
    db.add_admin(int(message.text), name)
    bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ!')

    bot.send_message(message.chat.id, 
                     format.get_hello_admin_text(),
                     reply_markup=format.get_hello_admin_keyboard())
    load_admins()


# –°–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

def start_order(message):
    '''
    –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    '''
    if not check_access_message(message):  return
    msg = bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?', reply_markup=format.get_order_start_keyboard())
    bot.register_next_step_handler(msg, start_order_step2)

def start_order_step2(message):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return

    global carts
    if message.chat.id not in carts.keys():
        carts.update({message.chat.id: {}})

    match message.text:
        case format.button_back:
            if message.chat.id in carts.keys():
                carts.pop(message.chat.id)
            hello_message_command(message)
        case format.category_1:
            order_food_simple_step1(message, 1)
        case format.category_2:
            order_food_simple_step1(message, 2)
        case format.category_3:
            order_food_simple_step1(message, 3)
        case format.category_4:
            order_food_simple_step1(message, 4)
        case format.category_6:
            order_food_simple_step1(message, 6)
        case format.button_cart:
            cart_edit_step1(message)
        case format.button_make_order:
            make_order(message)
        case _: 
            msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
            bot.register_next_step_handler(msg, start_order_step2)

def order_food_simple_step1(message, category):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ –ø—Ä–æ—Å—Ç—ã—Ö –±–ª—é–¥
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    '''
    if not check_access_message(message):  return
    menu = db.menu_get_list_category_nice(category)
    msg = bot.send_message(message.chat.id, 
                     format.format_menu_list_nice(menu),
                     reply_markup=format.get_menu_keyboard(menu))
    bot.register_next_step_handler(msg, order_food_simple_step2, menu, category)

def order_food_simple_step2(message, menu, category):
    '''
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return
    if message.text == format.button_back:
        start_order(message)
        return
    id = format.get_id_from_name(menu, message.text)
    if id == -1:
        bot.send_message(message.chat.id, format.message_no_menu)
        start_order(message)
        return
    msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=format.get_numbers_keyboard())
    bot.register_next_step_handler(msg, order_food_simple_step3, id, category)

def order_food_simple_step3(message, id, category):
    '''
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_simple_step3, id, category)
        return
    if message.text == format.button_back:
        order_food_simple_step1(message, category)
        return
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_simple_step3, id, category)
        return
    count = 0
    try:
        count = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_simple_step3, id, category)
        return
    if count <= 0:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_simple_step3, id, category)
        return
    
    global carts
    if id in carts[message.chat.id].keys():
        carts[message.chat.id][id] += count
    else:
        carts[message.chat.id][id] = count
    
    bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ')
    bot.send_message(message.chat.id, '–ß—Ç–æ-–Ω–∏–±–¥—É—å –µ—â—ë?')
    order_food_simple_step1(message, category)
    
def order_food_complex_step1(message, category):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ —Å–ª–æ–∂–Ω—ã—Ö –±–ª—é–¥
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (–≥–∞—Ä–Ω–∏—Ä)
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return
    
    menu = []
    if category == 2:
        menu = db.menu_get_list_category_nice(category)
    else: 
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return
    
    if len(menu) == 0:
        bot.send_message(message.chat.id, format.get_menu_no_items_text())
        start_order(message)
        return
    
    msg = bot.send_message(message.chat.id, 
                     format.format_menu_list_nice(menu),
                     reply_markup=format.get_menu_keyboard(menu))
    bot.register_next_step_handler(msg, order_food_complex_step2, menu, category)
    
def order_food_complex_step2(message, menu, category):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return
    if message.text == format.button_back:
        start_order(message)
        return
    
    id = format.get_id_from_name(menu, message.text)
    if id == -1:
        bot.send_message(message.chat.id, format.get_menu_no_items_text())
        start_order(message)
        return
    
    menu = []
    if category == 2:
        menu = db.menu_get_list_category_nice(category + 1)
    else: 
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return
    
    if len(menu) == 0:
        bot.send_message(message.chat.id, format.get_menu_no_items_text())
        start_order(message)
        return
    msg = bot.send_message(message.chat.id, 
                     format.format_menu_list_nice(menu),
                     reply_markup=format.get_menu_keyboard(menu))
    bot.register_next_step_handler(message, order_food_complex_step3, menu, category, id)

def order_food_complex_step3(message, menu, category, first_id):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        order_food_complex_step1(message)
        return
    if message.text == format.button_back:
        order_food_complex_step1(message)
        return
    
    second_id = format.get_id_from_name(menu, message.text)
    if second_id == -1:
        bot.send_message(message.chat.id, format.get_menu_no_items_text())
        order_food_complex_step1(message)
        return
    msg = bot.send_message(message.chat.id, 
                           '–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å?', 
                           reply_markup=format.get_numbers_keyboard())
    bot.register_next_step_handler(msg, order_food_complex_step4, menu, category, first_id, second_id)

def order_food_complex_step4(message, menu, category, first_id, second_id):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_complex_step4, id, category)
        return
    if message.text == format.button_back:
        order_food_simple_step1(message, category)
        return
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_complex_step4, id, category)
        return
    count = 0
    try:
        count = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
    
        bot.register_next_step_handler(message, order_food_complex_step4, id, category)
        return
    if count <= 0:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, order_food_complex_step4, id, category)
        return
    
    id = f'{first_id}+{second_id}'
    global carts
    if id in carts[message.chat.id].keys():
        carts[message.chat.id][id] += count
    else:
        carts[message.chat.id][id] = count
    
    bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ')
    bot.send_message(message.chat.id, '–ß—Ç–æ-–Ω–∏–±–¥—É—å –µ—â—ë?')
    order_food_complex_step1(message, category)

# –°–µ–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã

def cart_edit_step1(message):
    '''
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–µ–Ω—é –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–Ω–∏–∫–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –∏—Ç–æ–≥–æ–º
    –ö–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏:
        –¢–æ–≤–∞—Ä - [delete]
        [+] [-] [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ]
    '''
    if not check_access_message(message):  return
    global carts
    msg = bot.send_message(message.chat.id, 
                           format.get_cart_help_text(), 
                           reply_markup=format.get_cart_keyboard())
    msg_cart = bot.send_message(message.chat.id,
                     format.format_cart_list(carts[message.chat.id]),
                     reply_markup=format.get_cart_edit_keyboard(carts[message.chat.id])
                     )
    cart_message_id[message.chat.id] = msg_cart.id
    bot.register_next_step_handler(msg, cart_edit_step2)

def cart_edit_step2(message):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(msg, cart_edit_step2)
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–∞
    if message.chat.id in cart_message_id.keys():
        bot.delete_message(message.chat.id, cart_message_id.pop(message.chat.id))
    
    match message.text:
        case format.button_back:
            start_order(message)
        case format.button_cart_clear:
            carts[message.chat.id] = {}
            bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
            start_order(message)
        case format.button_make_order:
            make_order(message)
        case _:
            msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
            bot.register_next_step_handler(msg, cart_edit_step2)

# –°–µ–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞

def make_order(message):
    '''
    –ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
    –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    –í –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç—É –≤ –±–∞–∑–µ);
    –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç—É –≤ –±–∞–∑–µ)
    –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
    '''
    if not check_access_message(message):  return
    global carts
    if message.chat.id not in carts.keys() or carts[message.chat.id] == {}:
        msg = bot.send_message(message.chat.id, format.get_cart_empty_text())
        start_order(msg)
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–∞
    if message.chat.id in cart_message_id.keys():
        bot.delete_message(message.chat.id, cart_message_id.pop(message.chat.id))
        
    
    bot.send_message(message.chat.id, 
                     format.get_order_ok_text(carts[message.chat.id]),
                     reply_markup=format.get_order_ok_keyboard()
                     )
    bot.register_next_step_handler(message, make_order_step1)

def make_order_step1(message):
    '''
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        start_order(message)
        return
    if message.text == format.button_back:
        start_order(message)
        return

    match message.text:
        case format.button_ok:
            telephone = db.get_telephone_from_last_order(message.chat.id)
            msg = bot.send_message(message.chat.id,
                             format.get_order_telephone_text(telephone),
                             reply_markup=format.get_order_telephone_keyboard(telephone))
            bot.register_next_step_handler(msg, make_order_step2)
        case '_':
            start_order(message)
            return
            
def make_order_step2(message):
    '''
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å
    –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, make_order_step2)
        return
    if message.text == format.button_back:
        start_order(message)
        return
    
    telepgone_regexp = r'(\s*)?(\+)?([- _():=+]?\d[- _():=+]?){10,14}(\s*)?'
    match = re.match(telepgone_regexp, message.text)

    if not match:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler(message, make_order_step2)
        return

    address = db.get_address_from_last_order(message.chat.id)

    msg = bot.send_message(message.chat.id,
                           format.get_order_address_text(address),
                           reply_markup=format.get_order_address_keyboard(address))
    bot.register_next_step_handler(msg, make_order_step3, match.string)
    
def make_order_step3(message, telephone):
    '''
    –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    '''
    if not check_access_message(message):  return
    if not message.content_type == 'text':
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, make_order_step3)
        return
    if message.text == format.button_back:
        message.text = format.button_ok
        make_order_step1(message)
        return
    if '\"' in message.text or '\'' in message.text:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å')
        bot.register_next_step_handler(message, make_order_step3)
        return
    
    number = db.order_add(message.chat.id, 
                 telephone, 
                 message.text, 
                 format.format_cart_list_check(carts[message.chat.id]))

    bot.send_message(message.chat.id,
                     format.get_ordered_user_text(number),
                     reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(orders_chat,
                     format.get_ordered_notify_text(carts.pop(message.chat.id), 
                                                    number,
                                                    message.text,
                                                    telephone),
                     reply_markup=format.get_ordered_accept_keyboard(number))


bot.infinity_polling()

