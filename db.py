import sqlite3
from datetime import date, datetime
from config import FILE_DB

DB = FILE_DB

'''
–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:
0 - –¢–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω
1 - –ü—Ä–∏–Ω—è—Ç
2 - –û—Ç–º–µ–Ω—ë–Ω
'''

class Food:
    '''
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
    1 - –ü–µ—Ä–≤–æ–µ –±–ª—é–¥–æ
    2 - –ì–∞—Ä–Ω–∏—Ä
    3 - –ú—è—Å–Ω–æ–µ
    4 - –°–∞–ª–∞—Ç
    5 - –ù–∞–ø–∏—Ç–æ–∫
    '''
    id = -1
    category = 0
    name = ''
    price = 0
    visibility = 0

def check_database() -> None:
    '''
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é
    '''
    
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS `order` 
                (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `user_id` TEXT, `date` date, `telephone` TEXT, `address` TEXT, `order_list` TEXT, status INTEGER DEFAULT 0)''')
    cur.execute('''CREATE TABLE IF NOT EXISTS `menu` 
                (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `category` INTEGER, `name` TEXT UNIQUE, `price` INTEGER, `visibility` INTEGER DEFAULT 1)''')
    cur.execute('''CREATE TABLE  IF NOT EXISTS `message` 
                (`name` TEXT PRIMARY KEY, `text` TEXT NOT NULL)''')
    cur.execute('''CREATE TABLE IF NOT EXISTS`admin`
                (`id` INTEGER PRIMARY KEY, `name` TEXT NOT NULL)''')
    
    # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    cur.execute('''INSERT OR IGNORE INTO `message` (name, text) 
                   VALUES ('HELLO_TEXT', "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç—É–µ—Ç –ü–∏—â–µ–ø—Ä–æ–º!
üìù –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±–µ–¥ –¥–æ 11; –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–±–µ–¥–æ–≤ —Å 13 –¥–æ 14 üïê")''')
    
    con.commit()

def add_admin(id: int, name: str) -> None:
    '''
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''INSERT INTO `admin` (id, name) 
                VALUES ({id}, "{name}")''')
    con.commit()

def delete_admin(id: int) -> None:
    '''
    –£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''DELETE FROM `admin`
                    WHERE id = {id}''')
    con.commit()

def get_admins() -> list:
    '''
    –í—ã–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT id, name FROM `admin`''')
    return cur.fetchall()


def menu_get_list_nice() -> list:
    '''
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö
    '''
    result = []
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute('''SELECT id, category, name, price
                FROM menu 
                WHERE menu.visibility = 1
                ORDER BY category, id ASC;''')
    rows = cur.fetchall()
    for row in rows:
        f = Food()
        f.id = row[0]
        f.category = row[1]
        f.name = row[2]
        f.price = row[3]
        result.append(f)
    return result

def menu_get_list() -> list:
    '''
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥
    '''
    result = []
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute('''SELECT id, category, name, price, visibility
                FROM menu 
                ORDER BY menu.category, menu.id ASC;''')
    rows = cur.fetchall()
    for row in rows:
        f = Food()
        f.id = row[0]
        f.category = row[1]
        f.name = row[2]
        f.price = row[3]
        f.visibility = row[4]
        result.append(f)
    return result

def menu_get_list_category(category: int) -> list:
    '''
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –º–µ–Ω—é –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT * FROM menu 
                    WHERE category = {category} 
                    ORDER BY `id` ASC;''')
    rows = cur.fetchall()
    result = []
    for row in rows:
        f = Food()
        f.id = row[0]
        f.category = row[1]
        f.name = row[2]
        f.price = row[3]
        f.visibility = row[4]
        result.append(f)
    return result

def menu_get_list_category_nice(category: int) -> list:
    '''
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –º–µ–Ω—é –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT * FROM menu 
                    WHERE category = {category} AND visibility = 1
                    ORDER BY `id` ASC;''')
    rows = cur.fetchall()
    result = []
    for row in rows:
        f = Food()
        f.id = row[0]
        f.category = row[1]
        f.name = row[2]
        f.price = row[3]
        f.visibility = row[4]
        result.append(f)
    return result


def menu_add_item(i: Food) -> None:
    '''
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º –±–ª—é–¥–æ–º
    # TODO –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''INSERT INTO menu (category, name, price) 
                VALUES ({i.category}, "{i.name}", {i.price})''')
    con.commit()

def menu_edit_item(id: int, new: Food) -> None:
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—è
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''UPDATE menu
                SET name = '{new.name}', price = {new.price}, visibility = {new.visibility}
                WHERE id = {id};''')
    con.commit()

def menu_delete_item(id: int) -> None:
    '''
    –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ id
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''DELETE FROM menu WHERE id = {id};''')
    con.commit()

def get_item(id) -> Food:
    '''
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ë–î
    –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT * FROM menu 
                    WHERE id = {id};''')
    value = cur.fetchone()

    if value is None:
        return Food()
    
    result = Food()
    result.id = value[0]
    result.category = value[1]
    result.name = value[2]
    result.price = value[3]
    result.visibility = value[4]

    return result

def get_telephone_from_last_order(user_id: int) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT id, telephone FROM `order` 
                    WHERE user_id = {user_id} 
                    ORDER BY id DESC;''')
    value = cur.fetchone()

    if value is None: return ''
    else: return value[1]

def get_address_from_last_order(user_id: int) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT id, address FROM `order` 
                    WHERE user_id = {user_id} 
                    ORDER BY id DESC;''')
    value = cur.fetchone()

    if value is None: return ''
    else: return value[1]

def order_add(user_id: int, telephone: str, address: str, order_list: str, date: datetime = datetime.now()) -> int:
    '''
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —Å –∑–∞–∫–∞–∑–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''INSERT INTO `order` (user_id, date, telephone, address, order_list) 
                VALUES ("{user_id}", "{date.strftime("%d.%m.%Y %H:%M:%S")}", "{telephone}", "{address}", "{order_list}")''')
    con.commit()
    
    cur.execute(f'''SELECT id 
                    FROM`order` 
                    WHERE user_id = {user_id} 
                    ORDER BY id DESC;''')
    return int(cur.fetchone()[0])

def order_get_user_id(id: int) -> int:
    '''
    –ü–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∫–ª–∏–µ–Ω—Ç–∞
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT user_id FROM `order` 
                    WHERE id = {id};''')
    value = cur.fetchone()

    if value is None: return 0
    else: return value[0]

def order_change_status(id: int, status: int) -> None:
    '''
    –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()    
    cur.execute(f'''UPDATE `order`
                SET status = {status}
                WHERE id = {id};''')
    con.commit()

def order_accept(id: int) -> int:
    '''
    –î–µ–ª–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –≤ –ë–î, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∫–ª–∏–µ–Ω—Ç–∞
    '''
    order_change_status(id, 1)
    return order_get_user_id(id)
    
def order_cancel(id: int) -> int:
    '''
    –î–µ–ª–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –≤ –ë–î, —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∫–ª–∏–µ–Ω—Ç–∞
    '''
    order_change_status(id, 2)
    return order_get_user_id(id)
    
def message_get(name: str) -> str:
    '''
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f'''SELECT text
                    FROM `message` 
                    WHERE name = "{name}";''')
    value = cur.fetchone()

    if value is None: return ''
    else: return value[0]

def message_set(name: str, value: str):
    '''
    –ó–∞–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    '''
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute('''UPDATE `message`
                    SET text = ?
                    WHERE name = ?;''', (value, name))
    con.commit()

def get_message_hello_text() -> str:
    '''
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    return message_get('HELLO_TEXT')

def set_message_hello_text(value: str):
    '''
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    message_set('HELLO_TEXT', value)
