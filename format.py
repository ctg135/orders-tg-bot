import datetime
from telebot import types

import db

category_1 = 'üç≤ –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞'
category_2 = 'üçù –ì–∞—Ä–Ω–∏—Ä—ã'
category_3 = 'üçñ –ú—è—Å–Ω–æ–µ'
category_4 = 'ü•ó –°–∞–ª–∞—Ç—ã'
category_5 = 'üßÉ –ù–∞–ø–∏—Ç–∫–∏'

button_ok = '–û–∫'
button_back = '‚Ü©Ô∏è –ù–∞–∑–∞–¥'

button_menu_nice = '–ú–µ–Ω—é –¥–Ω—è'
button_menu_full = '–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å'
button_menu_hidden = '–°–∫—Ä—ã—Ç—å'
button_menu_visible = '–£–∫–∞–∑–∞—Ç—å'

button_init_order = 'üìñ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
button_make_order = '‚úÖ –ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω'
button_cart = '–ö–æ—Ä–∑–∏–Ω–∞'
button_cart_clear = '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'
button_category_1 = 'üç≤ –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞'
button_category_2 = 'üçù –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞'
button_category_3 = 'ü•ó –°–∞–ª–∞—Ç—ã'
button_category_4 = 'üßÉ –ù–∞–ø–∏—Ç–∫–∏'

def get_hello_admin_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –±–æ—Ç–∞
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_nice = types.KeyboardButton(text=button_menu_nice)
    menu_full = types.KeyboardButton(text=button_menu_full)
    result.add(menu_nice, menu_full)
    return result

def get_hello_client_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu = types.KeyboardButton(text=button_init_order)
    result.add(menu)
    return result

def get_menu_add_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–µ–Ω—é
    '''
    result = types.InlineKeyboardMarkup()
    add = types.InlineKeyboardButton(text='‚ûï', callback_data='menu_add')
    result.add(add)
    return result

def get_menu_edit_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
    '''
    result = types.InlineKeyboardMarkup()
    add = types.InlineKeyboardButton(text='‚ûï', callback_data='menu_add')
    edit = types.InlineKeyboardButton(text='üìù', callback_data='menu_edit')
    delete = types.InlineKeyboardButton(text='üóëÔ∏è', callback_data='menu_delete')
    result.add(add, edit, delete)
    return result

def get_menu_category_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cat_1 = types.KeyboardButton(text=category_1)
    cat_2 = types.KeyboardButton(text=category_2)
    cat_3 = types.KeyboardButton(text=category_3)
    cat_4 = types.KeyboardButton(text=category_4)
    cat_5 = types.KeyboardButton(text=category_5)
    back = types.KeyboardButton(text=button_back)
    result.add(cat_1, cat_2)
    result.add(cat_3, cat_4)
    result.add(cat_5, back)
    return result

def get_menu_id_category_keyboard(menu: list) -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å id –∑–∞–ø–∏—Å–∏
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in menu:
        result.add(types.KeyboardButton(text=item.id))
    return result

def get_menu_keyboard(menu: list) -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±–ª—é–¥
    –î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_id_from_name(menu, name)
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    lefts = menu[::2]
    rights = menu[1::2]
    for left, right in zip(lefts, rights):
        result.add(left.name, right.name)
    if len(menu) % 2 == 1: 
        result.add(types.KeyboardButton(text=lefts[-1].name))
    result.add(types.KeyboardButton(text=button_back))
    return result

def get_numbers_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —á–∏—Å–ª–∞–º–∏ [1-9] –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    num1 = types.KeyboardButton(text='1')
    num2 = types.KeyboardButton(text='2')
    num3 = types.KeyboardButton(text='3')
    num4 = types.KeyboardButton(text='4')
    num5 = types.KeyboardButton(text='5')
    num6 = types.KeyboardButton(text='6')
    num7 = types.KeyboardButton(text='7')
    num8 = types.KeyboardButton(text='8')
    num9 = types.KeyboardButton(text='9')
    back = types.KeyboardButton(text=button_back)
    result.add(num1, num2, num3)
    result.add(num4, num5, num6)
    result.add(num7, num8, num9)
    result.add(back)
    return result

def get_menu_visibility_edit_keyobard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—É–Ω–∫—Ç–∞
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    hidden = types.KeyboardButton(text=button_menu_hidden)
    visible = types.KeyboardButton(text=button_menu_visible)
    ok = types.KeyboardButton(text=button_ok)
    result.add(visible, hidden)
    result.add(ok)
    return result

def get_ok_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é –û–∫
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    ok = types.KeyboardButton(text='–û–∫')
    result.add(ok)
    return result

def get_order_start_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    basket = types.KeyboardButton(text=button_cart)
    make_order = types.KeyboardButton(text=button_make_order)
    back = types.KeyboardButton(text=button_back)
    cat_1 = types.KeyboardButton(text=button_category_1)
    cat_2 = types.KeyboardButton(text=button_category_2)
    cat_3 = types.KeyboardButton(text=button_category_3)
    cat_4 = types.KeyboardButton(text=button_category_4)
    result.add(basket, make_order)
    result.add(cat_1, cat_2)
    result.add(cat_3, cat_4)
    result.add(back)
    return result

def get_cart_keyboard() -> types.InlineKeyboardMarkup:
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã
    '''
    result = types.ReplyKeyboardMarkup(resize_keyboard=True)
    clear = types.KeyboardButton(text=button_cart_clear)
    make_order = types.KeyboardButton(text=button_make_order)
    back = types.KeyboardButton(text=button_back)
    result.add(back, clear)
    result.add(make_order)
    return result

def get_cart_list_keyboard(cart: map):
    '''
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    '''
    return None

def get_hello_admin_text() -> str:
    '''
    –¢–µ–∫—Å—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    '''
    return f'''
<code>{button_menu_nice}</code> - —Å–ø–∏—Å–æ–∫ –º–µ–Ω—é, –∫–∞–∫ –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É
<code>{button_menu_full}</code> - –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
'''

def get_hello_client_text() -> str:
    '''
    –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    return '''
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç—É–µ—Ç –ü–∏—â–µ–ø—Ä–æ–º!
üìù –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±–µ–¥ –¥–æ 11; –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–±–µ–¥–æ–≤ —Å 13 –¥–æ 14 üïê'''

def get_hello_client_late_text() -> str:
    '''
    –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞)
    '''
    return '–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞?'

def get_menu_no_items_text() -> str:
    '''
    –¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ–Ω—é (—É –∫–ª–∏–µ–Ω—Ç–∞)
    '''
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ'

def get_cart_help_text() -> str:
    '''
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    '''
    return '''
–ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ ‚ûï –∏ ‚ûñ
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ùå –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
'''

def format_menu_list_full(menu: db.Food) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω—é, —Å–æ –∑–Ω–∞–∫–æ–º —Å–∫—Ä—ã—Ç–æ—Å—Ç–∏
    '''
    result = ''
    last_category = 0
    for food in menu:
        if food.category != last_category:
            last_category = food.category
            match last_category:
                case 1:
                    result += f'\n<b>{category_1}</b>\n'
                case 2:
                    result += f'\n<b>{category_2}</b>\n'
                case 3:
                    result += f'\n<b>{category_3}</b>\n'
                case 4:
                    result += f'\n<b>{category_4}</b>\n'
                case 5:
                    result += f'\n<b>{category_5}</b>\n'
        result += f'  {food.name} <i>{food.price} —Ä—É–±.</i> { "" if food.visibility else "ü´£" } n'
    return result

def format_menu_list_nice(menu: list) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω—é
    '''
    if len(menu) == 0:
        return '–ü–æ–∫–∞ –Ω–µ—Ç—É –ø–æ–∑–∏—Ü–∏–π'

    result = ''
    last_category = 0
    for food in menu:
        if food.category != last_category:
            last_category = food.category
            match last_category:
                case 1:
                    result += f'\n<b>{category_1}</b>\n'
                case 2:
                    result += f'\n<b>{category_2}</b>\n'
                case 3:
                    result += f'\n<b>{category_3}</b>\n'
                case 4:
                    result += f'\n<b>{category_4}</b>\n'
                case 5:
                    result += f'\n<b>{category_5}</b>\n'
        result += f' {food.name} <i>{food.price} —Ä—É–±.</i>\n'
    return result

def format_menu_list_id(menu: db.Food) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω—é —Å id (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è)
    '''
    result = ''
    last_category = 0
    for food in menu:
        if food.category != last_category:
            last_category = food.category
            match last_category:
                case 1:
                    result += f'\n<b>{category_1}</b>\n'
                case 2:
                    result += f'\n<b>{category_2}</b>\n'
                case 3:
                    result += f'\n<b>{category_3}</b>\n'
                case 4:
                    result += f'\n<b>{category_4}</b>\n'
                case 5:
                    result += f'\n<b>{category_5}</b>\n'
        result += f'{food.id}. {food.name} <i>{food.price} —Ä—É–±.</i> {"" if food.visibility else "ü´£" }\n'
    return result

def format_cart_list(cart: map) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    '''
    if len(cart) == 0:
        return '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'

    result = ''
    counter = 1
    summary = 0
    for id, count in cart.items():
        id_temp = str(id)
        if id_temp.isdigit():
            item = db.get_item(id)
            cost = item.price * count
            summary += cost
            counter += 1
            result += f'{counter}. <b>{item.name}</b> ({item.price} —Ä—É–±.) x <b>{count}</b> = {cost} —Ä—É–±.\n\n'
        else:
            ids = id_temp.split('+')
            items = [db.get_item(ids[0]), db.get_item(ids[1])]
            cost = (items[0].price + items[1].price) * count
            summary += cost
            counter += 1
            result += f'{counter}. <b>{items[0].name} —Å {items[1].name}</b> ({items[0].price + items[1].price} —Ä—É–±.) x <b>{count}</b> = {cost} —Ä—É–±.\n\n'
    result += f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {summary} —Ä—É–±.'
    return result


def get_id_from_name(menu: list, name: str) -> int:
    '''
    –ò–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∞–µ—Ç id –±–ª—é–¥–∞
    –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - get_menu_keyboard(menu)
    '''
    id = 0
    for item in menu:
        if item.name == name:
            id = item.id
    return id
